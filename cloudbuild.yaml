steps:
  # Paso 1: Construir la imagen de Docker
  - name: 'gcr.io/cloud-builders/docker'
    id: Build
    args:
      - 'build'
      - '--build-arg'
      - 'PROJECT_ID=$PROJECT_ID'
      - '-t'
      - 'gcr.io/$PROJECT_ID/user-management-api:$COMMIT_SHA'
      - '-t'
      - 'gcr.io/$PROJECT_ID/user-management-api:latest'
      - '.'
    timeout: 1200s # Aumenta timeout para builds complejos

  # Paso 2: Ejecutar pruebas unitarias
  - name: 'gcr.io/$PROJECT_ID/user-management-api:$COMMIT_SHA'
    id: Test
    entrypoint: 'pytest'
    args:
      - 'tests/'
      - '-v'
      - '--cov=app'
      - '--cov-report=xml'
    env:
      - 'DATABASE_URL=sqlite:///./test.db'
    timeout: 600s

  # Paso 3: Subir resultados de cobertura a Codecov
  - name: 'gcr.io/cloud-builders/curl'
    id: Codecov
    args:
      - '-f'
      - '-X'
      - 'POST'
      - '--data-binary'
      - '@coverage.xml'
      - 'https://codecov.io/upload/v4?token=$$CODECOV_TOKEN&project=$PROJECT_ID'
    secretEnv: ['CODECOV_TOKEN']
    timeout: 300s

  # Paso 4: Desplegar en Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: Deploy
    args:
      - 'run'
      - 'deploy'
      - 'user-management-api'
      - '--image'
      - 'gcr.io/$PROJECT_ID/user-management-api:$COMMIT_SHA'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '8080'
      - '--cpu'
      - '2'
      - '--memory'
      - '2Gi'
      - '--min-instances'
      - '1'
      - '--max-instances'
      - '5'
      - '--concurrency'
      - '50'
      - '--timeout'
      - '300'
      - '--set-env-vars'
      - 'ENVIRONMENT=production'
      - '--add-cloudsql-instances'
      - '$PROJECT_ID:us-central1:your-cloudsql-instance'
      - '--service-account'
      - 'cloud-run-sa@$PROJECT_ID.iam.gserviceaccount.com'
    timeout: 600s

  # Paso 5: Limpiar im치genes antiguas
  - name: 'gcr.io/cloud-builders/gcloud'
    id: Cleanup
    args:
      - 'container'
      - 'images'
      - 'list-tags'
      - 'gcr.io/$PROJECT_ID/user-management-api'
      - '--filter=NOT tags:latest AND NOT tags:$COMMIT_SHA'
      - '--format=json'
    entrypoint: 'bash'
    script: |
      # Script para eliminar im치genes antiguas
      images=$(gcloud container images list-tags gcr.io/$PROJECT_ID/user-management-api \
        --filter='NOT tags:latest AND NOT tags:$COMMIT_SHA' \
        --format='get(digest)')
      for digest in $images; do
        gcloud container images delete gcr.io/$PROJECT_ID/user-management-api@$digest --quiet
      done

# Secretos para Codecov
availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/codecov-token/versions/latest
      env: 'CODECOV_TOKEN'

# Im치genes a subir
images:
  - 'gcr.io/$PROJECT_ID/user-management-api:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/user-management-api:latest'

# Timeout global
timeout: 1800s

# Opciones de m치quina
options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100
